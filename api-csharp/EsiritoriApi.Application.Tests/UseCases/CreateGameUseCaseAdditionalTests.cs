namespace EsiritoriApi.Application.Tests.UseCases;

using EsiritoriApi.Application.DTOs;
using EsiritoriApi.Application.Interfaces;
using EsiritoriApi.Application.UseCases;
using EsiritoriApi.Domain.Entities;
using Moq;
using Xunit;

[Trait("Category", "„É¶„Éº„Çπ„Ç±„Éº„Çπ")]
public sealed class CreateGameUseCaseAdditionalTests
{
    private readonly Mock<IGameRepository> _mockRepository;
    private readonly CreateGameUseCase _useCase;

    public CreateGameUseCaseAdditionalTests()
    {
        _mockRepository = new Mock<IGameRepository>();
        _useCase = new CreateGameUseCase(_mockRepository.Object);
    }

    [Fact]
    public void „Ç≥„É≥„Çπ„Éà„É©„ÇØ„Çø_null„É™„Éù„Ç∏„Éà„É™„Åß‰æãÂ§ñ„ÅåÁô∫Áîü„Åô„Çã()
    {
        Assert.Throws<ArgumentNullException>(() => new CreateGameUseCase(null!));
    }

    [Fact]
    public async Task „Ç≠„É£„É≥„Çª„É¨„Éº„Ç∑„Éß„É≥„Éà„Éº„ÇØ„É≥„ÅåÈÅ©Âàá„Å´Ê∏°„Åï„Çå„Çã()
    {
        var request = new CreateGameRequest
        {
            CreatorName = "„ÉÜ„Çπ„Éà„Éó„É¨„Ç§„É§„Éº",
            Settings = new GameSettingsDto { TimeLimit = 60, RoundCount = 3, PlayerCount = 4 }
        };
        var cancellationToken = new CancellationToken();

        _mockRepository.Setup(r => r.SaveAsync(It.IsAny<Game>(), cancellationToken))
                      .Returns(Task.CompletedTask);

        await _useCase.ExecuteAsync(request, cancellationToken);

        _mockRepository.Verify(r => r.SaveAsync(It.IsAny<Game>(), cancellationToken), Times.Once);
    }

    [Fact]
    public async Task „É™„Éù„Ç∏„Éà„É™‰øùÂ≠òÊôÇ„ÅÆ‰æãÂ§ñ„ÅåÈÅ©Âàá„Å´‰ºùÊí≠„Åï„Çå„Çã()
    {
        var request = new CreateGameRequest
        {
            CreatorName = "„ÉÜ„Çπ„Éà„Éó„É¨„Ç§„É§„Éº",
            Settings = new GameSettingsDto { TimeLimit = 60, RoundCount = 3, PlayerCount = 4 }
        };
        var expectedException = new InvalidOperationException("„Éá„Éº„Çø„Éô„Éº„Çπ„Ç®„É©„Éº");

        _mockRepository.Setup(r => r.SaveAsync(It.IsAny<Game>(), It.IsAny<CancellationToken>()))
                      .ThrowsAsync(expectedException);

        var actualException = await Assert.ThrowsAsync<InvalidOperationException>(() => _useCase.ExecuteAsync(request));
        Assert.Equal(expectedException.Message, actualException.Message);
    }

    [Theory]
    [InlineData(30, 2, 2)]
    [InlineData(120, 5, 8)]
    [InlineData(90, 4, 6)]
    public async Task Êßò„ÄÖ„Å™„Ç≤„Éº„É†Ë®≠ÂÆö„Åß„ÅÆ„Ç≤„Éº„É†‰ΩúÊàê(int timeLimit, int roundCount, int playerCount)
    {
        var request = new CreateGameRequest
        {
            CreatorName = "„ÉÜ„Çπ„Éà„Éó„É¨„Ç§„É§„Éº",
            Settings = new GameSettingsDto { TimeLimit = timeLimit, RoundCount = roundCount, PlayerCount = playerCount }
        };

        _mockRepository.Setup(r => r.SaveAsync(It.IsAny<Game>(), It.IsAny<CancellationToken>()))
                      .Returns(Task.CompletedTask);

        var response = await _useCase.ExecuteAsync(request);

        Assert.NotNull(response);
        Assert.Equal(timeLimit, response.Game.Settings.TimeLimit);
        Assert.Equal(roundCount, response.Game.Settings.RoundCount);
        Assert.Equal(playerCount, response.Game.Settings.PlayerCount);
    }

    [Theory]
    [InlineData("Êó•Êú¨Ë™û„Éó„É¨„Ç§„É§„Éº")]
    [InlineData("Player123")]
    [InlineData("„Éó„É¨„Ç§„É§„Éº_„ÅÇ„ÅÑ„ÅÜ„Åà„Åä")]
    [InlineData("English Player")]
    [InlineData("üéÆ„Ç≤„Éº„Éû„ÉºüéØ")]
    public async Task Êßò„ÄÖ„Å™„Éó„É¨„Ç§„É§„ÉºÂêç„Åß„ÅÆ„Ç≤„Éº„É†‰ΩúÊàê(string creatorName)
    {
        var request = new CreateGameRequest
        {
            CreatorName = creatorName,
            Settings = new GameSettingsDto { TimeLimit = 60, RoundCount = 3, PlayerCount = 4 }
        };

        _mockRepository.Setup(r => r.SaveAsync(It.IsAny<Game>(), It.IsAny<CancellationToken>()))
                      .Returns(Task.CompletedTask);

        var response = await _useCase.ExecuteAsync(request);

        Assert.NotNull(response);
        Assert.Equal(creatorName, response.Player.Name);
        Assert.Equal(creatorName, response.Game.Players.First().Name);
    }

    [Fact]
    public async Task „É¨„Çπ„Éù„É≥„Çπ„Éû„ÉÉ„Éî„É≥„Ç∞„ÅÆÂÆåÂÖ®ÊÄßÊ§úË®º()
    {
        var request = new CreateGameRequest
        {
            CreatorName = "ÂÆåÂÖ®„ÉÜ„Çπ„Éà„Éó„É¨„Ç§„É§„Éº",
            Settings = new GameSettingsDto { TimeLimit = 75, RoundCount = 7, PlayerCount = 5 }
        };

        _mockRepository.Setup(r => r.SaveAsync(It.IsAny<Game>(), It.IsAny<CancellationToken>()))
                      .Returns(Task.CompletedTask);

        var response = await _useCase.ExecuteAsync(request);

        // GameÊÉÖÂ†±„ÅÆÊ§úË®º
        Assert.NotNull(response.Game);
        Assert.NotEmpty(response.Game.Id);
        Assert.Equal("Waiting", response.Game.Status);
        
        // SettingsÊÉÖÂ†±„ÅÆÊ§úË®º
        Assert.NotNull(response.Game.Settings);
        Assert.Equal(75, response.Game.Settings.TimeLimit);
        Assert.Equal(7, response.Game.Settings.RoundCount);
        Assert.Equal(5, response.Game.Settings.PlayerCount);
        
        // CurrentRoundÊÉÖÂ†±„ÅÆÊ§úË®º
        Assert.NotNull(response.Game.CurrentRound);
        Assert.Equal(1, response.Game.CurrentRound.RoundNumber);
        
        // CurrentTurnÊÉÖÂ†±„ÅÆÊ§úË®º
        Assert.NotNull(response.Game.CurrentRound.CurrentTurn);
        Assert.Equal(1, response.Game.CurrentRound.CurrentTurn.TurnNumber);
        Assert.Equal("SettingAnswer", response.Game.CurrentRound.CurrentTurn.Status);
        Assert.NotEmpty(response.Game.CurrentRound.CurrentTurn.DrawerId);
        Assert.Equal(string.Empty, response.Game.CurrentRound.CurrentTurn.Answer);
        
        // PlayersÊÉÖÂ†±„ÅÆÊ§úË®º
        Assert.NotNull(response.Game.Players);
        Assert.Single(response.Game.Players);
        Assert.Equal("ÂÆåÂÖ®„ÉÜ„Çπ„Éà„Éó„É¨„Ç§„É§„Éº", response.Game.Players.First().Name);
        Assert.False(response.Game.Players.First().IsReady);
        Assert.False(response.Game.Players.First().IsDrawer);
        
        // ScoreRecordsÊÉÖÂ†±„ÅÆÊ§úË®º
        Assert.NotNull(response.Game.ScoreRecords);
        Assert.Empty(response.Game.ScoreRecords);
        
        // PlayerÊÉÖÂ†±„ÅÆÊ§úË®º
        Assert.NotNull(response.Player);
        Assert.Equal("ÂÆåÂÖ®„ÉÜ„Çπ„Éà„Éó„É¨„Ç§„É§„Éº", response.Player.Name);
        Assert.NotEmpty(response.Player.Id);
        Assert.False(response.Player.IsReady);
        Assert.False(response.Player.IsDrawer);
        
        // Game„Å®Player„ÅÆID„Åå‰∏ÄËá¥„Åô„Çã„Åì„Å®„ÇíÁ¢∫Ë™ç
        Assert.Equal(response.Player.Id, response.Game.Players.First().Id);
        Assert.Equal(response.Player.Id, response.Game.CurrentRound.CurrentTurn.DrawerId);
    }

    [Fact]
    public async Task Ë§áÊï∞ÂõûÂÆüË°åÊôÇ„Å´„É¶„Éã„Éº„ÇØ„Å™ID„ÅåÁîüÊàê„Åï„Çå„Çã()
    {
        var request = new CreateGameRequest
        {
            CreatorName = "„ÉÜ„Çπ„Éà„Éó„É¨„Ç§„É§„Éº",
            Settings = new GameSettingsDto { TimeLimit = 60, RoundCount = 3, PlayerCount = 4 }
        };

        _mockRepository.Setup(r => r.SaveAsync(It.IsAny<Game>(), It.IsAny<CancellationToken>()))
                      .Returns(Task.CompletedTask);

        var response1 = await _useCase.ExecuteAsync(request);
        var response2 = await _useCase.ExecuteAsync(request);

        Assert.NotEqual(response1.Game.Id, response2.Game.Id);
        Assert.NotEqual(response1.Player.Id, response2.Player.Id);
    }
}