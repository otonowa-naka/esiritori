name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  backend-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
    
    - name: Restore dependencies
      run: dotnet restore backend/EsiritoriApi.sln
    
    - name: Build
      run: dotnet build backend/EsiritoriApi.sln --no-restore
    
    - name: Start LocalStack
      run: |
        docker run -d --name localstack \
          -p 4566:4566 \
          -e SERVICES=dynamodb \
          -e DEBUG=0 \
          -e PERSISTENCE=0 \
          -e EAGER_SERVICE_LOADING=1 \
          -e SKIP_INFRA_DOWNLOADS=1 \
          -e DATA_DIR=/tmp/localstack/data \
          -v /tmp/localstack:/tmp/localstack \
          localstack/localstack:3.0
    
    - name: Wait for LocalStack to be ready
      run: |
        echo "Waiting for LocalStack to start..."
        for i in {1..30}; do
          if curl -f http://localhost:4566/_localstack/health >/dev/null 2>&1; then
            echo "LocalStack is ready"
            curl -s http://localhost:4566/_localstack/health | jq .
            break
          fi
          echo "Waiting for LocalStack... (attempt $i/30)"
          sleep 2
        done
        
        # Check if LocalStack is actually ready
        if ! curl -f http://localhost:4566/_localstack/health >/dev/null 2>&1; then
          echo "LocalStack failed to start properly"
          docker logs localstack
          exit 1
        fi
    
    - name: Setup AWS CLI
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: test
        aws-secret-access-key: test
        aws-region: ap-northeast-1
    
    - name: Create DynamoDB table
      run: |
        chmod +x scripts/create-dynamodb-table.sh
        ./scripts/create-dynamodb-table.sh
      env:
        AWS_ENDPOINT_URL: http://localhost:4566
    
    - name: Run Unit Tests
      run: |
        dotnet test backend/EsiritoriApi.Domain.Tests/ --no-build --verbosity normal --collect:"XPlat Code Coverage"
        dotnet test backend/EsiritoriApi.Application.Tests/ --no-build --verbosity normal --collect:"XPlat Code Coverage"
        dotnet test backend/EsiritoriApi.Infrastructure.Tests/ --no-build --verbosity normal --collect:"XPlat Code Coverage"
        dotnet test backend/EsiritoriApi.Api.Tests/ --no-build --verbosity normal --collect:"XPlat Code Coverage"
      env:
        AWS_ENDPOINT_URL: http://localhost:4566
        AWS_ACCESS_KEY_ID: test
        AWS_SECRET_ACCESS_KEY: test
        AWS_DEFAULT_REGION: ap-northeast-1
    
    - name: Run Integration Tests
      run: dotnet test backend/EsiritoriApi.Integration.Tests/ --no-build --verbosity normal --collect:"XPlat Code Coverage"
      env:
        AWS_ENDPOINT_URL: http://localhost:4566
        AWS_ACCESS_KEY_ID: test
        AWS_SECRET_ACCESS_KEY: test
        AWS_DEFAULT_REGION: ap-northeast-1
    
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      with:
        directory: ./backend/
        flags: backend
        name: backend-coverage
        fail_ci_if_error: false

  frontend-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 8
    
    - name: Get pnpm store directory
      id: pnpm-cache
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT
    
    - name: Setup pnpm cache
      uses: actions/cache@v4
      with:
        path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-
    
    - name: Install dependencies
      run: cd frontend && pnpm install
    
    - name: Type check
      run: cd frontend && pnpm type-check
    
    - name: Lint
      run: cd frontend && pnpm lint
    
    - name: Build
      run: cd frontend && pnpm build