name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  backend-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
    
    - name: Restore dependencies
      run: dotnet restore backend/EsiritoriApi.sln
    
    - name: Build
      run: dotnet build backend/EsiritoriApi.sln --no-restore
    
    - name: Start DynamoDB Local with docker-compose
      run: |
        docker compose up -d dynamodb-local dynamodb-init
    
    - name: Wait for DynamoDB Local to be ready
      run: |
        echo "Waiting for DynamoDB Local to start..."
        pip install awscli
        aws configure set aws_access_key_id test
        aws configure set aws_secret_access_key test
        aws configure set region ap-northeast-1
        
        for i in {1..30}; do
          if aws dynamodb list-tables --endpoint-url http://localhost:8000 --region ap-northeast-1 >/dev/null 2>&1; then
            echo "DynamoDB Local is ready"
            aws dynamodb list-tables --endpoint-url http://localhost:8000 --region ap-northeast-1
            break
          fi
          echo "Waiting for DynamoDB Local... (attempt $i/30)"
          sleep 2
        done
        
        # Check if DynamoDB Local is actually ready
        if ! aws dynamodb list-tables --endpoint-url http://localhost:8000 --region ap-northeast-1 >/dev/null 2>&1; then
          echo "DynamoDB Local failed to start properly"
          docker-compose logs dynamodb-local
          docker-compose logs dynamodb-init
          exit 1
        fi
    
    - name: Run Unit Tests
      run: |
        dotnet test backend/EsiritoriApi.Domain.Tests/ --no-build --verbosity normal --collect:"XPlat Code Coverage"
        dotnet test backend/EsiritoriApi.Application.Tests/ --no-build --verbosity normal --collect:"XPlat Code Coverage"
        dotnet test backend/EsiritoriApi.Infrastructure.Tests/ --no-build --verbosity normal --collect:"XPlat Code Coverage"
        dotnet test backend/EsiritoriApi.Api.Tests/ --no-build --verbosity normal --collect:"XPlat Code Coverage"
      env:
        AWS_ENDPOINT_URL: http://localhost:8000
        AWS_ACCESS_KEY_ID: test
        AWS_SECRET_ACCESS_KEY: test
        AWS_DEFAULT_REGION: ap-northeast-1
    
    - name: Run Integration Tests
      run: dotnet test backend/EsiritoriApi.Integration.Tests/ --no-build --verbosity normal --collect:"XPlat Code Coverage"
      env:
        AWS_ENDPOINT_URL: http://localhost:8000
        AWS_ACCESS_KEY_ID: test
        AWS_SECRET_ACCESS_KEY: test
        AWS_DEFAULT_REGION: ap-northeast-1
    
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      with:
        directory: ./backend/
        flags: backend
        name: backend-coverage
        fail_ci_if_error: false
    
    - name: Cleanup docker-compose services
      if: always()
      run: docker compose down

  frontend-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 8
    
    - name: Get pnpm store directory
      id: pnpm-cache
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT
    
    - name: Setup pnpm cache
      uses: actions/cache@v4
      with:
        path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-
    
    - name: Install dependencies
      run: cd frontend && pnpm install
    
    - name: Type check
      run: cd frontend && pnpm type-check
    
    - name: Lint
      run: cd frontend && pnpm lint
    
    - name: Build
      run: cd frontend && pnpm build